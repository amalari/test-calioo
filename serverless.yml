# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: inventory
# app and org for use with dashboard.serverless.com
#app: your-app-name
#org: your-org-name

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
frameworkVersion: "3"

provider:
  name: aws
  runtime: nodejs16.x
  lambdaHashingVersion: 20201221
  region: ap-southeast-1

  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - "dynamodb:PutItem"
            - "dynamodb:GetItem"
            - "dynamodb:DeleteItem"
            - "dynamodb:Scan"
          Resource:
            - { "Fn::GetAtt": ["InventoriesTable", "Arn"] }
            - { "Fn::GetAtt": ["InventoryDiscountsTable", "Arn"] }


functions:
  listInventory:
    handler: src/handlers/InventoryHandlers.listInventory
    events:
      - httpApi:
          path: /inventory
          method: get
          queryStringParameters: {
            limit: {
              required: false,
              type: 'integer',
            },
            last_key: {
              required: false,
              type: 'string',
              description: 'get data after this parameter, type is json string object partition and sort key',
            }
          }
          responseData: {
            200: {
              bodyType: 'InventoriesResponse'
            }
          }
  getInventory:
    handler: src/handlers/InventoryHandlers.getInventory
    events:
      - httpApi:
          path: /inventory/{id}
          method: get
          responseData: {
            200: {
              bodyType: 'InventoryResponse'
            }
          }
  createInventory:
    handler: src/handlers/InventoryHandlers.createInventory
    events:
      - httpApi:
          path: /inventory
          method: post
          bodyType: 'InventoryReqDto'
          responseData: {
            200: {
              bodyType: 'InventoryResponse'
            }
          }
  upsertInventoryDiscount:
    handler: src/handlers/InventoryDiscountHandlers.putInventoryDiscount
    events:
      - httpApi:
          path: /inventory-discount
          method: put
          bodyType: 'InventoryDiscountReqDto'
          responseData: {
            200: {
              bodyType: 'InventoryDiscountResponse'
            }
          }
#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
#    events:
#      - httpApi:
#          path: /users/create
#          method: get
#      - websocket: $connect
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx
#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp
#      - alb:
#          listenerArn: arn:aws:elasticloadbalancing:us-east-1:XXXXXX:listener/app/my-load-balancer/50dc6c495c0c9188/
#          priority: 1
#          conditions:
#            host: example.com
#            path: /hello

#    Define function environment variables here
#    environment:
#      variable2: value2

plugins:
  - serverless-auto-swagger
  - serverless-plugin-typescript
  - serverless-offline
  - serverless-dynamodb-local

custom:
  autoswagger:
    typefiles: [
      './src/dto/InventoryDiscountReqDto.ts',
      './src/dto/InventoryDiscountResDto.ts',
      './src/dto/InventoryReqDto.ts',
      './src/dto/InventoryResDto.ts',
      './src/dto/swagger/swagger.d.ts',
      './src/types/response.d.ts'
    ]
  dynamodb:
    stages:
      - dev
    start:
      port: 8000
      inMemory: true
      migrate: true
# you can add CloudFormation resource templates here
#resources:
#  Resources:
#    NewResource:
#      Type: AWS::S3::Bucket
#      Properties:
#        BucketName: my-new-bucket
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"
resources:
  Resources:
    InventoriesTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: InventoriesTable
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        AttributeDefinitions:
          - AttributeName: restaurantId
            AttributeType: S
          - AttributeName: inventoryId
            AttributeType: S
          # - AttributeName: name
          #   AttributeType: S
          # - AttributeName: currentStock
          #   AttributeType: N
          # - AttributeName: price
          #   AttributeType: S
          # - AttributeName: supplier
          #   AttributeType: S
        KeySchema:
          - AttributeName: restaurantId
            KeyType: HASH
          - AttributeName: inventoryId
            KeyType: RANGE
    InventoryDiscountsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: InventoryDiscountsTable
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        AttributeDefinitions:
          - AttributeName: category
            AttributeType: S
          # - AttributeName: discount
          #   AttributeType: N
        KeySchema:
          - AttributeName: category
            KeyType: HASH
